{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://sram-smw/./src/file-data.ts","webpack://sram-smw/./src/index.ts"],"sourcesContent":["\nconst OverworldLevelSettingFlags = 0x0000; // 96 bytes\nconst OverworldEventFlags = 0x0060; // 15 bytes\nconst CurrentSubmapMario = 0x006F; // 1 byte\nconst CurrentSubmapLuigi = 0x0070; // 1 byte\nconst PlayerAnimation = 0x0071; // 4 bytes\nconst OverworldXPosMario = 0x0075; // 2 bytes\nconst OverworldYPosMario = 0x0077; // 2 bytes\nconst OverworldXPosLuigi = 0x0079; // 2 bytes\nconst OverworldYPosLuigi = 0x007B; // 2 bytes\nconst PointerOverworldXPosMario = 0x007D; // 2 bytes\nconst PointerOverworldYPosMario = 0x007F; // 2 bytes\nconst PointerOverworldXPosLuigi = 0x0081; // 2 bytes\nconst PointerOverworldYPosLuigi = 0x0083; // 2 bytes\nconst SwitchBlockFlagsGreen = 0x0085; // 1 byte\nconst SwitchBlockFlagsYellow = 0x0086; // 1 byte\nconst SwitchBlockFlagsBlue = 0x0087; // 1 byte\nconst SwitchBlockFlagsRed = 0x0088; // 1 byte\nconst EmptyRegion = 0x0089; // 3 bytes\nconst NumberEventsTriggered = 0x008C; // 1 byte\n\n\nexport class FileData {\n    static SlotSize = 143;\n    static ChecksumComplement = 0x008D // 2 bytes\n\n    static getSlot(pos: number) {\n        return Math.floor(pos / FileData.SlotSize);\n    }\n    static getSlotPos(pos: number) {\n        return pos % FileData.SlotSize;\n    }\n\n    Slot: number;\n    SlotName: string;\n    Region: number;\n    Index: number;\n    RegionText: string;\n    \n    constructor (pos: number) {\n        let slot = FileData.getSlot(pos);\n        let slotPos = FileData.getSlotPos(pos); // position relative to file\n        let region = 0;\n        let index = 0;\n        let regionText = \"\";\n\n        if (slotPos >= OverworldLevelSettingFlags && slotPos < OverworldEventFlags) {\n            region = OverworldLevelSettingFlags;\n            index = slotPos - OverworldLevelSettingFlags;\n            regionText = \"Level \" + this.levelEntrance(index);\n        } else if (slotPos >= OverworldEventFlags && slotPos < CurrentSubmapMario) {\n            region = OverworldEventFlags;\n            index = slotPos - OverworldEventFlags;\n            regionText = \"Event flags \" + index;\n        } else if (slotPos == CurrentSubmapMario) {\n            region = CurrentSubmapMario;\n            index = 0;\n            regionText = \"Current Submap (Mario)\";\n        } else if (slotPos == CurrentSubmapLuigi) {\n            region = CurrentSubmapLuigi;\n            index = 0;\n            regionText = \"Current Submap (Luigi)\";\n        } else if (slotPos >= PlayerAnimation && slotPos < OverworldXPosMario) {\n            region = PlayerAnimation;\n            index = slotPos - PlayerAnimation;\n            regionText = \"Player animation \" + index;\n        } else if (slotPos >= OverworldXPosMario && slotPos < OverworldYPosMario) {\n            region = OverworldXPosMario;\n            index = slotPos - OverworldXPosMario;\n            regionText = \"Overworld X Position (Mario) \" + index;\n        } else if (slotPos >= OverworldYPosMario && slotPos < OverworldXPosLuigi) {\n            region = OverworldYPosMario;\n            index = slotPos - OverworldYPosMario;\n            regionText = \"Overworld Y Position (Mario) \" + index;\n        } else if (slotPos >= OverworldXPosLuigi && slotPos < OverworldYPosLuigi) {\n            region = OverworldXPosLuigi;\n            index = slotPos - OverworldXPosLuigi;\n            regionText = \"Overworld X Position (Luigi) \" + index;\n        } else if (slotPos >= OverworldYPosLuigi && slotPos < PointerOverworldXPosMario) {\n            region = OverworldYPosLuigi;\n            index = slotPos - OverworldYPosLuigi;\n            regionText = \"Overworld Y Position (Luigi) \" + index;\n        } else if (slotPos >= PointerOverworldXPosMario && slotPos < PointerOverworldYPosMario) {\n            region = PointerOverworldXPosMario;\n            index = slotPos - PointerOverworldXPosMario;\n            regionText = \"Pointer to Overworld X Position (Mario) \" + index;\n        } else if (slotPos >= PointerOverworldYPosMario && slotPos < PointerOverworldXPosLuigi) {\n            region = PointerOverworldYPosMario;\n            index = slotPos - PointerOverworldYPosMario;\n            regionText = \"Pointer to Overworld Y Position (Mario) \" + index;\n        } else if (slotPos >= PointerOverworldXPosLuigi && slotPos < PointerOverworldYPosLuigi) {\n            region = PointerOverworldXPosLuigi;\n            index = slotPos - PointerOverworldXPosLuigi;\n            regionText = \"Pointer to Overworld X Position (Luigi) \" + index;\n        } else if (slotPos >= PointerOverworldYPosLuigi && slotPos < SwitchBlockFlagsGreen) {\n            region = PointerOverworldYPosLuigi;\n            index = slotPos - PointerOverworldYPosLuigi;\n            regionText = \"Pointer to Overworld Y Position (Luigi) \" + index;\n        } else if (slotPos == SwitchBlockFlagsGreen) {\n            region = SwitchBlockFlagsGreen;\n            index = 0;\n            regionText = \"Green Switch Block flag\";\n        } else if (slotPos == SwitchBlockFlagsYellow) {\n            region = SwitchBlockFlagsYellow;\n            index = 0;\n            regionText = \"Yellow Switch Block flag\";\n        } else if (slotPos == SwitchBlockFlagsBlue) {\n            region = SwitchBlockFlagsBlue;\n            index = 0;\n            regionText = \"Blue Switch Block flag\";\n        } else if (slotPos == SwitchBlockFlagsRed) {\n            region = SwitchBlockFlagsRed;\n            index = 0;\n            regionText = \"Red Switch Block flag\";\n        } else if (slotPos >= EmptyRegion && slotPos < NumberEventsTriggered) {\n            region = EmptyRegion;\n            index = slotPos - EmptyRegion;\n            regionText = \"Empty\";\n        } else if (slotPos == NumberEventsTriggered) {\n            region = NumberEventsTriggered;\n            index = 0;\n            regionText = \"Number of Events Triggered\";\n        } else if (slotPos >= FileData.ChecksumComplement && slotPos < FileData.SlotSize) {\n            region = FileData.ChecksumComplement;\n            index = slotPos - FileData.ChecksumComplement;\n            regionText = \"Checksum Complement \" + index;\n        } else {\n            region = slotPos;\n            index = 0;\n            regionText = \"Undefined\";\n        }\n\n        // expose\n        this.Slot = slot;\n        this.SlotName = this.slotIndexName(this.Slot);\n        this.Region = region;\n        this.Index = index;\n        this.RegionText = regionText;\n    }\n\n    slotIndexName(i: number) {\n        switch (i) {\n            case 0:\n                return \"File A\";\n            case 1:\n                return \"File B\";\n            case 2:\n                return \"File C\";\n            case 3:\n                return \"Backup A\";\n            case 4:\n                return \"Backup B\";\n            case 5:\n                return \"Backup C\";\n            default:\n                return \"Undefined\";\n        }\n    }\n\n    levelEntrance(i: number) {\n        // 0x000 - 0x024, 0x101 - 0x13B\n        let levelNum = (i > 0x024) ? (0x0DC + i) : i;\n        return levelNum.toString(16).padStart(3, \"0\")\n    }\n}","import { FileData } from \"./file-data\";\nimport \"../css/style.scss\";\n\n// dom elements\nconst openSramBtn = document.getElementById(\"open-sram-btn\");\nopenSramBtn.addEventListener(\"change\", openSramFile);\n\ndocument.addEventListener(\"keypress\", docKeyPress);\ndocument.addEventListener(\"keydown\", docKeyDown, true);\nconst fileInfoDiv = document.getElementById(\"file-info\");\nconst saveSramBtn = document.getElementById(\"save-sram-btn\");\nsaveSramBtn.addEventListener(\"click\", saveSramFile);\n\n\n\n// hex editor\nconst fileDataDiv = document.getElementById(\"hex-editor\");\nconst offsetsColDiv = document.getElementById(\"offsets-col\");\nconst bytesColDiv = document.getElementById(\"bytes-col\");\nconst bytesHeaderDiv = document.getElementById(\"bytes-header\");\nconst bytesDataDiv = document.getElementById(\"bytes-data\");\nconst charsColDiv = document.getElementById(\"chars-col\");\nconst charsHeaderDiv = document.getElementById(\"chars-header\");\nconst charsDataDiv = document.getElementById(\"chars-data\");\n\n// selected byte data\nconst selectionDiv = document.getElementById(\"selection\");\n\n// consts\nconst BYTES_PER_ROW = 16;\n\n// config\nvar showHeader = false;\n\n// global vars\nconst fileReader = new FileReader();\nvar sramFile: Uint8Array;\nvar sramFileOriginal: Uint8Array;\nvar openFileName = \"\";\n\nfunction openSramFile(e: ProgressEvent) {\n    let file = (<HTMLInputElement>e.target).files[0];\n    if (!file) return;\n    openFileName = file.name;\n\n    fileReader.addEventListener(\"load\", readFile);\n    fileReader.readAsArrayBuffer(file);\n}\n\nfunction readFile(e: Event) {\n    // is load event only good enough?\n    console.log(e);\n    let result = fileReader.result as ArrayBufferLike;\n    sramFile = new Uint8Array(result);\n    console.log(fileReader);\n    sramFileOriginal = sramFile.slice(0); // copy of values\n    console.log(sramFile);\n\n    fileInfoDiv.innerHTML = \"\";\n    const elText = document.createTextNode(sramFile.byteLength + \" bytes\");\n    fileInfoDiv.appendChild(elText);\n\n    buildOffsets();\n    fillBytesData();\n    fillTextTable();\n}\n\nfunction saveSramFile(e: Event) {\n    console.log(e);\n\n    if (sramFile) {\n        var blob = new Blob([sramFile], {type: \"application/octet-stream\"});\n        var link = document.createElement(\"a\");\n        link.href = window.URL.createObjectURL(blob);\n        link.download = openFileName;\n        link.click();\n    }\n}\n\nfunction buildHexEditorHeader() {\n    buildOffsetsHeader(2);\n\n    for (let i = 0; i < BYTES_PER_ROW; ++i) {\n        // bytes\n        let val = byteToHexString(i);\n        let span = createTextElement(\"span\", val);\n        span.id = \"bytes-header-\" + i;\n        span.classList.add(\"byte\");\n        span.classList.add(\"header\");\n        bytesHeaderDiv.appendChild(span);\n        if (!showHeader) bytesHeaderDiv.classList.add(\"hidden\");\n\n        // chars\n        span = createTextElement(\"span\", \"-\");\n        span.classList.add(\"char\");\n        span.classList.add(\"header\");\n        charsHeaderDiv.appendChild(span);\n        if (!showHeader) charsHeaderDiv.classList.add(\"hidden\");\n    } \n}\n\nfunction buildOffsets() {\n    offsetsColDiv.innerHTML = \"\";\n\n    let len = sramFile.byteLength;\n    let rows = Math.ceil(len / BYTES_PER_ROW);\n    let maxVal = len - 1;\n    let offsetNumChars = maxVal.toString(16).length;\n\n    buildOffsetsHeader(offsetNumChars);\n\n    // build rows\n    for (let r = 0; r < rows; ++r) {\n        let offset = (r * BYTES_PER_ROW).toString(16).padStart(offsetNumChars, \"0\");\n        let offsetSpan = createTextElement(\"span\", offset);\n        offsetSpan.classList.add(\"offset\");\n\n        offsetsColDiv.appendChild(offsetSpan);\n    }\n}\n\nfunction buildOffsetsHeader(width: number) {\n    let offsetsHeaderSpan = createTextElement(\"span\", \"\".padStart(width,\"-\"));\n    offsetsHeaderSpan.id = \"offsets-header\";\n    offsetsHeaderSpan.classList.add(\"offset\");\n    offsetsHeaderSpan.classList.add(\"header\");\n    if (!showHeader) offsetsHeaderSpan.classList.add(\"hidden\");\n    offsetsColDiv.appendChild(offsetsHeaderSpan);\n}\n\nfunction toggleHeader() {\n    const offsetsHeaderSpan = document.getElementById(\"offsets-header\");\n    showHeader = !showHeader;\n    if (showHeader) {\n        offsetsHeaderSpan.classList.remove(\"hidden\");\n        bytesHeaderDiv.classList.remove(\"hidden\");\n        charsHeaderDiv.classList.remove(\"hidden\");\n    } else {\n        offsetsHeaderSpan.classList.add(\"hidden\");\n        bytesHeaderDiv.classList.add(\"hidden\");\n        charsHeaderDiv.classList.add(\"hidden\");\n    }\n}\n\nfunction fillBytesData() {\n    bytesDataDiv.innerHTML = \"\";\n\n    let len = sramFile.byteLength;\n    let rows = Math.ceil(len / BYTES_PER_ROW);\n\n    for (let r = 0; r < rows; ++r) {\n        let rowOffset = r * BYTES_PER_ROW;\n        let rowDiv = document.createElement(\"div\");\n        rowDiv.classList.add(\"row\");\n\n        for (let c = 0; c < BYTES_PER_ROW; ++c) {\n            let pos:number = rowOffset + c;\n            if (pos >= len) break; // in the event the last row isn't full\n\n            // bytes\n            let val = byteToHexString(sramFile[pos]);\n            let span = createTextElement(\"span\", val);\n            span.classList.add(\"byte\");\n            span.dataset.pos = pos.toString();\n\n            // highlight save slot\n            addSlotClasses(span, pos);\n            \n            span.addEventListener(\"click\", byteClick);\n\n            rowDiv.appendChild(span);\n        }\n        // append the row\n        bytesDataDiv.appendChild(rowDiv);\n    }\n}\n\nfunction addSlotClasses(target: Element, pos: number) {\n    const slotLength = 143;\n    if (pos < slotLength) {\n        target.classList.add(\"file-a\");\n    } else if (pos >= slotLength && pos < slotLength*2) {\n        target.classList.add(\"file-b\");\n    } else if (pos >= slotLength*2 && pos < slotLength*3) {\n        target.classList.add(\"file-c\");\n    } else if (pos >= slotLength*3 && pos < slotLength*4) {\n        target.classList.add(\"file-a\");\n        target.classList.add(\"backup\");\n    } else if (pos >= slotLength*4 && pos < slotLength*5) {\n        target.classList.add(\"file-b\");\n        target.classList.add(\"backup\");\n    } else if (pos >= slotLength*5 && pos < slotLength*6) {\n        target.classList.add(\"file-c\");\n        target.classList.add(\"backup\");\n    } \n}\n\nfunction byteClick(e:Event) {\n    // remove selected\n    deselectAll();\n\n    //move selected class\n    const target = <HTMLElement>e.target;\n    target.classList.add(\"selected\");\n    \n    // update selection data\n    updateSelectionData(target);\n}\n\nfunction deselectAll() {\n    const lastSelected = document.getElementsByClassName(\"selected\");\n    for (const ls of lastSelected as any) {\n        ls.classList.remove(\"selected\");\n        \n        // was byte edit interrupted?\n        let bufferChar = ls.dataset.buffer;\n        if (bufferChar) {\n            // sram file has already been updated\n            // just delete the buffer and pad with a \"0\"\n            delete ls.dataset.buffer;\n            ls.innerHTML = \"0\" + ls.innerHTML;\n        }\n    }\n}\n\nfunction updateSelectionData(target:HTMLElement) {\n    selectionDiv.innerHTML = \"\";\n\n    // get data\n    let pos = parseInt(target.dataset.pos);\n    let view = new FileData(pos);\n    let val = target.innerHTML;\n    console.log(\"pos: \" + pos.toString(16));\n\n    // header\n    let selectionFileSpan = createTextElement(\"span\", view.SlotName);\n    selectionFileSpan.classList.add(\"selection-data\")\n    addSlotClasses(selectionFileSpan, pos);\n    selectionDiv.appendChild(selectionFileSpan);\n\n    let selectionRegionSpan = createTextElement(\"span\", view.RegionText);\n    selectionRegionSpan.classList.add(\"selection-data\")\n    selectionDiv.appendChild(selectionRegionSpan);\n\n    // info\n    let selectionValSpan = createTextElement(\"span\", val);\n    selectionValSpan.classList.add(\"selection-data\");\n    selectionDiv.appendChild(selectionValSpan);\n}\n\nfunction docKeyPress(e:KeyboardEvent) {\n    //console.log(e);\n    \n    // throw out commands\n    if (e.ctrlKey) return;\n\n    // TODO: handle enter key\n\n    // and non-hex chars\n    let num = parseInt(e.key, 16);\n    if (isNaN(num)) return;\n\n    let char = num.toString(16);\n    console.log(\"num press: \" + char);\n\n    // get current selection byte\n    const selected = document.getElementsByClassName(\"selected\");\n    if (selected.length !== 1) return;\n    const target = <HTMLElement>selected[0];\n    //console.log(target);\n    let pos = parseInt(target.dataset.pos);\n\n    let newVal: string;\n    let buffer = target.dataset.buffer;\n    if (buffer) {\n        delete target.dataset.buffer;\n        newVal = buffer + char;\n\n        let next = pos + 1;\n        advanceSelection(next);\n    } else {\n        target.dataset.buffer = char;\n        newVal = char;\n    }\n    sramFile[pos] = parseInt(newVal, 16);\n\n    // update byte in hex editor to match array data\n    target.innerHTML = newVal;\n\n    // update char in text view\n    const textTarget = document.querySelector(\"span.text[data-pos='\" + pos + \"']\");\n    textTarget.innerHTML = byteToChar(pos);\n\n    // did val change?\n    diff(pos);\n\n    let slot = FileData.getSlot(pos);\n    updateChecksum(slot);\n}\n\nfunction advanceSelection(pos:number) {\n    if (pos < 0) return; // maybe wrap to eof later\n    if (pos >= sramFile.byteLength) return; // maybe wrap to 0 later\n\n    // remove selected\n    deselectAll();\n    \n    // update selected span\n    const nextTarget = <HTMLElement>document.querySelector(\"span[data-pos='\" + pos + \"']\");\n    if (nextTarget === null) return;\n    nextTarget.classList.add(\"selected\");\n\n    // scroll into view\n    nextTarget.scrollIntoView({ behavior: \"auto\", block: \"center\", inline: \"nearest\" });\n\n    // update selection data\n    updateSelectionData(nextTarget);\n}\n\nfunction docKeyDown(e: KeyboardEvent) {\n    console.log(e);\n\n    // get current selection byte\n    const selected = document.getElementsByClassName(\"selected\");\n    if (selected.length !== 1) return;\n    const target = <HTMLElement>selected[0];\n    console.log(target);\n\n    let pos = parseInt(target.dataset.pos);\n    let next;\n\n    // handle arrow controls \n    switch (e.key) {\n        case \"ArrowLeft\":\n            e.preventDefault();\n            next = pos - 1;\n            advanceSelection(next);\n            break;\n        case \"ArrowUp\":\n            e.preventDefault();\n            next = pos - BYTES_PER_ROW;\n            advanceSelection(next);\n            break;\n        case \"ArrowDown\":\n            e.preventDefault();\n            next = pos + BYTES_PER_ROW;\n            advanceSelection(next);\n            break;\n        case \"ArrowRight\":\n            e.preventDefault();\n            next = pos + 1;\n            advanceSelection(next);\n            break;\n    }\n}\n\nfunction fillTextTable() {\n    charsDataDiv.innerHTML = \"\";\n\n    let len = sramFile.byteLength;\n    let rows = Math.ceil(len / BYTES_PER_ROW);\n\n    for (let r = 0; r < rows; ++r) {\n        let rowOffset = r * BYTES_PER_ROW;\n        let rowDiv = document.createElement(\"div\");\n        rowDiv.classList.add(\"row\");\n\n        for (let c = 0; c < BYTES_PER_ROW; ++c) {\n            let pos = rowOffset + c;\n            if (pos >= len) break; // in the event the last row isn't full\n\n            // text\n            let char = byteToChar(pos);\n            let span = createTextElement(\"span\", char);\n            span.classList.add(\"text\");\n            span.dataset.pos = pos.toString();\n            rowDiv.appendChild(span);\n        }\n        // append the row\n        charsDataDiv.appendChild(rowDiv);\n    }\n}\n\nfunction byteToChar (i:number) {\n    let charcode = sramFile[i];\n    // control chars to .\n    if (charcode < 0x20 || (charcode > 0x7E && charcode < 0xA0)) {\n        return \".\";\n    }\n    // space and 0xFF to nbsp;\n    if (charcode == 0x20 || charcode == 0xFF) return \"\\u00A0\";\n    // soft hypen to hyphen\n    if (charcode == 0xAD) return \"-\";\n    // otherwise get the char\n    return String.fromCharCode(charcode);\n}\n\nfunction byteToHexString(num: number) {\n    return num.toString(16).padStart(2, \"0\");\n}\n\nfunction createTextElement(type:string, text:string) {\n    const el = document.createElement(type);\n    const elText = document.createTextNode(text);\n    el.appendChild(elText);\n    return el;\n}\n\nfunction diffAll() {\n    for (let i = 0; i < sramFileOriginal.byteLength; ++i) {\n        diff(i);\n    } \n}\n\nfunction diff(i:number) {\n    let originalByte = sramFileOriginal[i];\n    let byte = sramFile[i];\n    let spans = document.querySelectorAll(\"span[data-pos='\" + i + \"']\");\n\n    for (const span of spans as any) {\n        if (byte === originalByte) {\n            span.classList.remove(\"changed\");\n        } else {\n            span.classList.add(\"changed\");\n        }\n    }\n}\n\nfunction updateChecksum(slot: number) {\n    const DefaultTotal = 0x5A5A;\n    let start = slot * FileData.SlotSize;\n    let end = start + FileData.ChecksumComplement;\n\n    let cs = checksum(start, end, DefaultTotal);\n    // to little endian\n    let hi = (cs & 0xFF00) >> 8;\n    let lo = cs & 0x00FF;\n\n    // update val\n    updateByteVal(end, lo);\n    updateByteVal(end + 1, hi);\n}\n\nfunction updateByteVal(pos: number, val: number) {\n    // update the byte array\n    sramFile[pos] = val;\n\n    // update changed span\n    const target = <HTMLElement>document.querySelector(\"span[data-pos='\" + pos + \"']\");\n    if (target === null) return;\n    target.innerHTML = byteToHexString(val);\n\n    // add approprate classes\n    diff(pos);\n}\n\nfunction checksum(start: number, end: number, total: number): number {\n    const maxint16 = Math.pow(2, 16);\n\n    if (!sramFile) return;\n    if (sramFile.byteLength < end) return;\n\n    // is there a built in wrap around?\n    let sum = 0;\n    for (let i = start; i < end; ++i) {\n        let byteVal = sramFile[i];\n        sum = (sum + byteVal) % maxint16;\n    }\n    console.log(\"total: \" + total.toString(16));\n    console.log(\"sum: \" + sum.toString(16));\n    let checksum = total - sum;\n    console.log(\"checksum: \" + Math.abs(checksum).toString(16)); // only abs in the display\n    console.log(\"assert: \" + (sum + checksum).toString(16) + \" should be \" + total.toString(16));\n\n    return checksum;\n}\n\n// init\nbuildHexEditorHeader();\n"],"names":["OverworldXPosMario","OverworldYPosMario","OverworldXPosLuigi","OverworldYPosLuigi","PointerOverworldXPosMario","PointerOverworldYPosMario","PointerOverworldXPosLuigi","PointerOverworldYPosLuigi","pos","slot","FileData","getSlot","slotPos","getSlotPos","region","index","regionText","this","levelEntrance","ChecksumComplement","SlotSize","Slot","SlotName","slotIndexName","Region","Index","RegionText","Math","floor","i","toString","padStart","document","getElementById","addEventListener","e","file","target","files","openFileName","name","fileReader","readFile","readAsArrayBuffer","ctrlKey","num","parseInt","key","isNaN","char","console","log","selected","getElementsByClassName","length","newVal","start","end","cs","hi","dataset","buffer","advanceSelection","sramFile","innerHTML","querySelector","byteToChar","diff","total","maxint16","pow","byteLength","sum","checksum","abs","updateByteVal","preventDefault","BYTES_PER_ROW","fileInfoDiv","blob","Blob","type","link","createElement","href","window","URL","createObjectURL","download","click","sramFileOriginal","offsetsColDiv","bytesHeaderDiv","bytesDataDiv","charsHeaderDiv","charsDataDiv","selectionDiv","showHeader","FileReader","result","Uint8Array","slice","elText","createTextNode","appendChild","len","rows","ceil","offsetNumChars","buildOffsetsHeader","r","offsetSpan","createTextElement","classList","add","buildOffsets","rowOffset","rowDiv","c","span","byteToHexString","addSlotClasses","byteClick","fillBytesData","fillTextTable","width","offsetsHeaderSpan","id","slotLength","deselectAll","updateSelectionData","ls","remove","view","val","selectionFileSpan","selectionRegionSpan","selectionValSpan","nextTarget","scrollIntoView","behavior","block","inline","charcode","String","fromCharCode","text","el","originalByte","byte","querySelectorAll","buildHexEditorHeader"],"sourceRoot":""}